name: dbt CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'data_engineering/data_build_tool/**'
      - 'data_engineering/requirements.txt'
      - '.github/workflows/*.yml'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'data_engineering/data_build_tool/**'
      - 'data_engineering/requirements.txt'
      - '.github/workflows/*.yml'

permissions:
  contents: write  # Needed to deploy to GitHub Pages
  pull-requests: write
  issues: write
  pages: write     # Needed for GitHub Pages deployment
  id-token: write  # Needed for GitHub OIDC

jobs:
  dbt-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔍 Display context
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "🔵 Pull Request: ${{ github.event.pull_request.title }}"
          echo "   PR Number: #${{ github.event.pull_request.number }}"
        else
          echo "🔵 Push to: ${{ github.ref_name }}"
        fi
        COMMIT_SHORT=$(echo "${{ github.sha }}" | cut -c1-7)
        echo "📝 Commit: $COMMIT_SHORT"
        echo "👤 Author: ${{ github.actor }}"
        echo "📅 Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('data_engineering/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        cd data_engineering
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up dbt
      run: |
        pip install dbt-core dbt-duckdb
        
    - name: Create dbt profiles directory
      run: |
        mkdir -p ~/.dbt
        
    - name: Create profiles.yml for DuckDB
      run: |
        cat > ~/.dbt/profiles.yml << EOF
        fentanyl_awareness:
          target: dev
          outputs:
            dev:
              type: duckdb
              path: 'fentanyl_awareness.duckdb'
              threads: 4
              schema: 'main'
        EOF
        
    - name: Install dbt packages
      run: |
        cd data_engineering/data_build_tool
        dbt deps --profiles-dir ~/.dbt
        
    - name: Check dbt project configuration
      run: |
        cd data_engineering/data_build_tool
        dbt debug --profiles-dir ~/.dbt
        
    - name: Create final_datasets directory
      run: |
        mkdir -p final_datasets
        
    - name: Load dbt seeds
      run: |
        cd data_engineering/data_build_tool
        dbt seed --profiles-dir ~/.dbt
        
    - name: Run dbt compile
      run: |
        cd data_engineering/data_build_tool
        dbt compile --profiles-dir ~/.dbt
        
    - name: Run dbt models
      run: |
        cd data_engineering/data_build_tool
        dbt run --profiles-dir ~/.dbt
        
    - name: Run dbt tests
      run: |
        cd data_engineering/data_build_tool
        dbt test --profiles-dir ~/.dbt
        
    - name: Generate dbt documentation
      run: |
        cd data_engineering/data_build_tool
        dbt docs generate --profiles-dir ~/.dbt
        echo ""
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "📚 dbt Documentation Generated"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "To view locally:"
        echo "  1. Download 'dbt-artifacts' artifact from this workflow"
        echo "  2. Extract and run: cd target && python -m http.server 8080"
        echo "  3. Open http://localhost:8080/index.html"
        echo ""
        echo "Or run locally: dbt docs serve --profiles-dir ~/.dbt"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        
    - name: Prepare docs for GitHub Pages
      if: github.ref == 'refs/heads/main'
      run: |
        cd data_engineering/data_build_tool
        # Create docs directory at workspace root
        mkdir -p ../../docs
        cp -r target/* ../../docs/
        echo "✅ Docs prepared for GitHub Pages deployment"
        ls -la ../../docs/ | head -10
        
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        keep_files: false
        
    - name: Show documentation URL
      if: github.ref == 'refs/heads/main'
      run: |
        echo ""
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "📚 dbt Docs Deployed Successfully!"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🔗 View your docs at:"
        echo "   https://Data-Science-Link.github.io/fentanyl-awareness/"
        echo ""
        echo "⏱️  May take 1-2 minutes to go live"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        
    - name: Upload dbt artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dbt-artifacts
        path: |
          data_engineering/data_build_tool/target/
          data_engineering/data_build_tool/logs/
        retention-days: 7
        
    - name: Comment on PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Try to read test results
          try {
            const testResultsPath = 'data_engineering/data_build_tool/target/run_results.json';
            if (fs.existsSync(testResultsPath)) {
              const testResults = JSON.parse(fs.readFileSync(testResultsPath, 'utf8'));
              const passed = testResults.results.filter(r => r.status === 'pass').length;
              const failed = testResults.results.filter(r => r.status === 'fail').length;
              const skipped = testResults.results.filter(r => r.status === 'skip').length;
              const total = testResults.results.length;
              
              let statusEmoji = '🎉';
              let statusText = 'All tests passed!';
              
              if (failed > 0) {
                statusEmoji = '❌';
                statusText = 'Some tests failed. Please check the logs for details.';
              } else if (skipped > 0 && passed === 0) {
                statusEmoji = '⚠️';
                statusText = 'All tests were skipped.';
              }
              
              const comment = `## 🧪 dbt Test Results
              
              Summary:
              - ✅ Passed: ${passed}
              - ❌ Failed: ${failed}
              - ⏭️ Skipped: ${skipped}
              - 📊 Total: ${total}
              
              ${statusEmoji} ${statusText}`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } else {
              // Fallback if run_results.json doesn't exist
              const comment = `## 🧪 dbt Test Results
              
              **Status:** ✅ Workflow completed successfully
              
              Note: Detailed test results not available. Check the Actions logs for more information.`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not read test results:', error.message);
            
            const comment = `## 🧪 dbt Test Results
            
            **Status:** ⚠️ Could not parse test results
            
            Error: ${error.message}
            
            Please check the Actions logs for detailed information.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }
